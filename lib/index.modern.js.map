{"version":3,"file":"index.modern.js","sources":["../src/index.ts"],"sourcesContent":["import { decodeJWT } from 'did-jwt';\nimport { verifyPresentation, verifyCredential, VerifiablePresentation, VerifiableCredential } from 'did-jwt-vc';\nimport { Resolver, Resolvable } from 'did-resolver';\nimport { getResolver, ConfigurationOptions } from 'infra-did-resolver';\nimport InfraDID from 'infra-did-js';\n\nexport interface VerifierConfig {\n    resolver?: Resolvable\n    networkConfig: ConfigurationOptions\n    did: string\n    knownIssuers: Issuer[]\n}\n\nexport type JWT = string\nexport type DID = string\nexport type Issuer = {\n    id: string,\n    did: DID\n}\n\nexport default class Verifier {\n    public resolver: Resolvable\n    public challenge: string\n    public did: string\n    public knownIssuers: Issuer[]\n\n    constructor (config : VerifierConfig) {\n        this.resolver = config.resolver ? config.resolver : new Resolver(getResolver(config.networkConfig));\n        this.did = config.did ? config.did : InfraDID.createPubKeyDIDsecp256k1('01').did;\n        this.challenge = '';\n        this.knownIssuers = config.knownIssuers;\n    }\n\n    public ready() : { challenge: string, aud: string } {\n        this.challenge = this.generateChallenge();\n        return { challenge: this.challenge, aud: this.did };\n    }\n\n    private generateChallenge() : string {\n        // use randomly generated DID as nonce for now\n        return InfraDID.createPubKeyDIDsecp256k1('01').did;\n    }\n\n    public getVPClaims(vp: JWT) : any {\n        const vcList = decodeJWT(vp).payload.vp.verifiableCredential;\n        return vcList.map((vc : JWT) => {\n            return this.getVCClaims(vc);\n        }).reduce((result : any, claims : any) => {\n            return { ...claims, ...result }\n        }, {});\n    }\n\n    public getVCClaims(vc: JWT) : any {\n        return decodeJWT(vc).payload.vc.credentialSubject;\n    }\n\n    public async isValid(jwt: JWT) : Promise<boolean> {\n        const decoded = decodeJWT(jwt);\n        if (decoded.payload.vp) return this.isValidVP(jwt);\n        else if (decoded.payload.vc) return this.isValidVC(jwt);\n        else throw new Error (`Unsupported type`);\n    }\n\n    public async isValidVP (vp: JWT) : Promise<boolean> {\n        // verify VP has been issued to the verifier with correct challenge\n        const verifiedPresentation = await verifyPresentation(vp, this.resolver, { challenge: this.challenge, audience: this.did })\n        const vcList = verifiedPresentation.payload.vp.VerifiedCredential;\n        const signer = verifiedPresentation.payload.signer;\n        if (this.isRevoked(signer.did)) throw new Error (`Deactivated Presenter`);\n        return vcList.map((vc : JWT) => {\n            return this.isValidVC(vc, signer.did);\n        }, this).reduce((result : boolean, validity : boolean) => {\n            return result && validity\n        }, true)\n    }\n\n    public async isValidVC (vc: JWT, holder?: DID) : Promise<boolean> {\n        // verify VC has NOT been tampered\n        const verifiedCredential = await verifyCredential(vc, this.resolver);\n        if (holder && verifiedCredential.payload.sub !== holder) throw new Error (`Signer is not the subject of VC`);\n\n        // verify the issuer identity is valid\n        if (this.isKnownIssuer(verifiedCredential.issuer)) throw new Error (`Unknown Issuer`);\n        \n        // verify the issuer identity has NOT been revoked\n        if (this.isRevoked(verifiedCredential.issuer)) throw new Error (`Deactivated Issuer`);\n        \n        // verify the VC has NOT been revoked\n        const vcID = verifiedCredential.payload.vc.id;\n        if (this.isRevoked(vcID)) throw new Error (`Revoked VC`);\n\n        return true;\n    }\n\n    public async isRevoked(did : DID) : Promise<boolean> {\n        const didDoc = await this.resolver.resolve(did);\n        if (didDoc.didDocumentMetadata.deactivated) return true;\n        return false;\n    }\n\n    public isKnownIssuer(issuer : DID) : boolean {\n        this.knownIssuers.forEach(knownIssuer => {\n            if (knownIssuer.did === issuer) return true;\n        });\n        return false;\n    }\n}"],"names":["constructor","config","this","resolver","Resolver","getResolver","networkConfig","did","InfraDID","createPubKeyDIDsecp256k1","challenge","knownIssuers","ready","generateChallenge","aud","getVPClaims","vp","decodeJWT","payload","verifiableCredential","map","vc","getVCClaims","reduce","result","claims","credentialSubject","[object Object]","jwt","decoded","isValidVP","isValidVC","Error","verifiedPresentation","verifyPresentation","audience","vcList","VerifiedCredential","signer","isRevoked","validity","holder","verifiedCredential","verifyCredential","sub","isKnownIssuer","issuer","id","resolve","didDocumentMetadata","deactivated","forEach","knownIssuer"],"mappings":"mcA0BIA,YAAaC,GACTC,KAAKC,SAAWF,EAAOE,SAAWF,EAAOE,SAAW,IAAIC,EAASC,EAAYJ,EAAOK,gBACpFJ,KAAKK,IAAMN,EAAOM,IAAMN,EAAOM,IAAMC,EAASC,yBAAyB,MAAMF,IAC7EL,KAAKQ,UAAY,GACjBR,KAAKS,aAAeV,EAAOU,aAGxBC,QAEH,OADAV,KAAKQ,UAAYR,KAAKW,oBACf,CAAEH,UAAWR,KAAKQ,UAAWI,IAAKZ,KAAKK,KAG1CM,oBAEJ,OAAOL,EAASC,yBAAyB,MAAMF,IAG5CQ,YAAYC,GAEf,OADeC,EAAUD,GAAIE,QAAQF,GAAGG,qBAC1BC,IAAKC,QACHC,YAAYD,IACzBE,OAAO,CAACC,EAAcC,SACTA,EAAWD,GACxB,IAGAF,YAAYD,GACf,OAAOJ,EAAUI,GAAIH,QAAQG,GAAGK,kBAGhBC,cAACC,GACjB,MAAMC,EAAUZ,EAAUW,GAC1B,GAAIC,EAAQX,QAAQF,GAAI,YAAYc,UAAUF,MACrCC,EAAQX,QAAQG,GAAI,YAAYU,UAAUH,aACpCI,0BAGGL,gBAAEX,GAEpB,MAAMiB,QAA6BC,EAAmBlB,EAAId,KAAKC,SAAU,CAAEO,UAAWR,KAAKQ,UAAWyB,SAAUjC,KAAKK,MAC/G6B,EAASH,EAAqBf,QAAQF,GAAGqB,mBACzCC,EAASL,EAAqBf,QAAQoB,OAC5C,GAAIpC,KAAKqC,UAAUD,EAAO/B,KAAM,UAAUyB,+BAC1C,OAAOI,EAAOhB,IAAKC,QACHU,UAAUV,EAAIiB,EAAO/B,KAClCL,MAAMqB,OAAO,CAACC,EAAkBgB,IACxBhB,GAAUgB,GAClB,GAGeb,gBAAEN,EAASoB,GAE7B,MAAMC,QAA2BC,EAAiBtB,EAAInB,KAAKC,UAC3D,GAAIsC,GAAUC,EAAmBxB,QAAQ0B,MAAQH,EAAQ,UAAUT,yCAGnE,GAAI9B,KAAK2C,cAAcH,EAAmBI,QAAS,UAAUd,wBAG7D,GAAI9B,KAAKqC,UAAUG,EAAmBI,QAAS,UAAUd,4BAIzD,GAAI9B,KAAKqC,UADIG,EAAmBxB,QAAQG,GAAG0B,IACjB,UAAUf,oBAEpC,SAGkBL,gBAACpB,GAEnB,oBAD0BJ,SAAS6C,QAAQzC,IAChC0C,oBAAoBC,YAI5BL,cAAcC,GAIjB,OAHA5C,KAAKS,aAAawC,QAAQC,IACtB,GAAIA,EAAY7C,MAAQuC,EAAQ"}