import{decodeJWT as e}from"did-jwt";import{verifyPresentation as r,verifyCredential as i}from"did-jwt-vc";import{Resolver as t}from"did-resolver";import{getResolver as s}from"infra-did-resolver";import a from"infra-did-js";function n(){return(n=Object.assign||function(e){for(var r=1;r<arguments.length;r++){var i=arguments[r];for(var t in i)Object.prototype.hasOwnProperty.call(i,t)&&(e[t]=i[t])}return e}).apply(this,arguments)}export default class{constructor(e){this.resolver=e.resolver?e.resolver:new t(s(e.networkConfig)),this.did=e.did?e.did:a.createPubKeyDIDsecp256k1("01").did,this.challenge="",this.knownIssuers=e.knownIssuers}ready(){return this.challenge=this.generateChallenge(),{challenge:this.challenge,aud:this.did}}generateChallenge(){return a.createPubKeyDIDsecp256k1("01").did}getVPClaims(r){return e(r).payload.vp.verifiableCredential.map(e=>this.getVCClaims(e)).reduce((e,r)=>n({},r,e),{})}getVCClaims(r){return e(r).payload.vc.credentialSubject}async isValid(r){const i=e(r);if(i.payload.vp)return this.isValidVP(r);if(i.payload.vc)return this.isValidVC(r);throw new Error("Unsupported type")}async isValidVP(e){const i=await r(e,this.resolver,{challenge:this.challenge,audience:this.did}),t=i.payload.vp.VerifiedCredential,s=i.payload.signer;if(this.isRevoked(s.did))throw new Error("Deactivated Presenter");return t.map(e=>this.isValidVC(e,s.did),this).reduce((e,r)=>e&&r,!0)}async isValidVC(e,r){const t=await i(e,this.resolver);if(r&&t.payload.sub!==r)throw new Error("Signer is not the subject of VC");if(this.isKnownIssuer(t.issuer))throw new Error("Unknown Issuer");if(this.isRevoked(t.issuer))throw new Error("Deactivated Issuer");if(this.isRevoked(t.payload.vc.id))throw new Error("Revoked VC");return!0}async isRevoked(e){return!!(await this.resolver.resolve(e)).didDocumentMetadata.deactivated}isKnownIssuer(e){return this.knownIssuers.forEach(r=>{if(r.did===e)return!0}),!1}}
//# sourceMappingURL=index.modern.js.map
