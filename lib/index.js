var e,r=require("did-jwt"),t=require("did-jwt-vc"),n=require("did-resolver"),i=require("infra-did-resolver"),o=(e=require("infra-did-js"))&&"object"==typeof e&&"default"in e?e.default:e;function s(){return(s=Object.assign||function(e){for(var r=1;r<arguments.length;r++){var t=arguments[r];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])}return e}).apply(this,arguments)}module.exports=function(){function e(e){this.resolver=e.resolver?e.resolver:new n.Resolver(i.getResolver(e.networkConfig)),this.did=e.did?e.did:o.createPubKeyDIDsecp256k1("01").did,this.challenge="",this.knownIssuers=e.knownIssuers}var u=e.prototype;return u.ready=function(){return this.challenge=this.generateChallenge(),{challenge:this.challenge,aud:this.did}},u.generateChallenge=function(){return o.createPubKeyDIDsecp256k1("01").did},u.getVPClaims=function(e){var t=this;return r.decodeJWT(e).payload.vp.verifiableCredential.map(function(e){return t.getVCClaims(e)}).reduce(function(e,r){return s({},r,e)},{})},u.getVCClaims=function(e){return r.decodeJWT(e).payload.vc.credentialSubject},u.isValid=function(e){try{var t=r.decodeJWT(e);if(t.payload.vp)return Promise.resolve(this.isValidVP(e));if(t.payload.vc)return Promise.resolve(this.isValidVC(e));throw new Error("Unsupported type")}catch(e){return Promise.reject(e)}},u.isValidVP=function(e){try{var r=this;return Promise.resolve(t.verifyPresentation(e,r.resolver,{challenge:r.challenge,audience:r.did})).then(function(e){var t=e.payload.vp.verifiableCredential,n=e.signer;return Promise.resolve(r.isRevoked(n.id)).then(function(e){if(e)throw new Error("Deactivated Presenter");return t.map(function(e){return r.isValidVC(e,n.id)},r).reduce(function(e,r){return e&&r},!0)})})}catch(e){return Promise.reject(e)}},u.isValidVC=function(e,r){try{var n=this;return Promise.resolve(t.verifyCredential(e,n.resolver)).then(function(e){if(r&&e.payload.sub!==r)throw new Error("Signer is not the subject of VC");if(!n.isKnownIssuer(e.issuer))throw new Error("Unknown Issuer");return Promise.resolve(n.isRevoked(e.issuer)).then(function(r){if(r)throw new Error("Deactivated Issuer");return Promise.resolve(n.isRevoked(e.payload.vc.id)).then(function(e){if(e)throw new Error("Revoked VC");return!0})})})}catch(e){return Promise.reject(e)}},u.isRevoked=function(e){try{return Promise.resolve(this.resolver.resolve(e)).then(function(e){return!!e.didDocumentMetadata.deactivated})}catch(e){return Promise.reject(e)}},u.isKnownIssuer=function(e){return!!this.knownIssuers.some(function(r){return r.did===e})},e}();
//# sourceMappingURL=index.js.map
