{"version":3,"file":"index.umd.js","sources":["../src/index.ts"],"sourcesContent":["import { decodeJWT } from 'did-jwt';\nimport { verifyPresentation, verifyCredential, VerifiablePresentation, VerifiableCredential } from 'did-jwt-vc';\nimport { Resolver, Resolvable } from 'did-resolver';\nimport { getResolver, ConfigurationOptions } from 'infra-did-resolver';\nimport InfraDID from 'infra-did-js';\n\nexport interface VerifierConfig {\n    resolver?: Resolvable\n    networkConfig: ConfigurationOptions\n    did: string\n    knownIssuer: string[]\n}\n\nexport type JWT = string\nexport type DID = string\n\nexport default class Verifier {\n    public resolver: Resolvable\n    public challenge: string\n    public did: string\n    public knownIssuer: string[]\n\n    constructor (config : VerifierConfig) {\n        this.resolver = config.resolver ? config.resolver : new Resolver(getResolver(config.networkConfig));\n        this.did = config.did ? config.did : InfraDID.createPubKeyDIDsecp256k1('01').did;\n        this.challenge = '';\n        this.knownIssuer = config.knownIssuer;\n    }\n\n    public ready() : { challenge: string, aud: string } {\n        this.challenge = this.generateChallenge();\n        return { challenge: this.challenge, aud: this.did };\n    }\n\n    private generateChallenge() : string {\n        // use randomly generated DID as nonce for now\n        return InfraDID.createPubKeyDIDsecp256k1('01').did;\n    }\n\n    public getVPClaims(vp: JWT) : any {\n        const vcList = decodeJWT(vp).payload.vp.verifiableCredential;\n        return vcList.map((vc : JWT) => {\n            return this.getVCClaims(vc);\n        }).reduce((result : any, claims : any) => {\n            return { ...claims, ...result }\n        }, {});\n    }\n\n    public getVCClaims(vc: JWT) : any {\n        return decodeJWT(vc).payload.vc.credentialSubject;\n    }\n\n    public async isValid(jwt: JWT) : Promise<boolean> {\n        const decoded = decodeJWT(jwt);\n        if (decoded.payload.vp) return this.isValidVP(jwt);\n        else if (decoded.payload.vc) return this.isValidVC(jwt);\n        else throw new Error (`Unsupported type`);\n    }\n\n    public async isValidVP (vp: JWT) : Promise<boolean> {\n        // verify VP has been issued to the verifier with correct challenge\n        const verifiedPresentation = await verifyPresentation(vp, this.resolver, { challenge: this.challenge, audience: this.did })\n        const vcList = verifiedPresentation.payload.vp.VerifiedCredential;\n        const signer = verifiedPresentation.payload.signer;\n        if (this.isRevoked(signer.did)) throw new Error (`Deactivated Presenter`);\n        return vcList.map((vc : JWT) => {\n            return this.isValidVC(vc, signer.did);\n        }, this).reduce((result : boolean, validity : boolean) => {\n            return result && validity\n        }, true)\n    }\n\n    public async isValidVC (vc: JWT, holder?: DID) : Promise<boolean> {\n        // verify VC has NOT been tampered\n        const verifiedCredential = await verifyCredential(vc, this.resolver);\n        if (holder && verifiedCredential.payload.sub !== holder) throw new Error (`Signer is not the subject of VC`);\n\n        // verify the issuer identity is valid\n        if (this.isKnownIssuer(verifiedCredential.issuer)) throw new Error (`Unknown Issuer`);\n        \n        // verify the issuer identity has NOT been revoked\n        if (this.isRevoked(verifiedCredential.issuer)) throw new Error (`Deactivated Issuer`);\n        \n        // verify the VC has NOT been revoked\n        const vcID = verifiedCredential.payload.vc.id;\n        if (this.isRevoked(vcID)) throw new Error (`Revoked VC`);\n\n        return true;\n    }\n\n    public async isRevoked(did : DID) : Promise<boolean> {\n        const didDoc = await this.resolver.resolve(did);\n        if (didDoc.didDocumentMetadata.deactivated) return true;\n        return false;\n    }\n\n    public isKnownIssuer(issuer : DID) : boolean {\n        for (const key in this.knownIssuer) {\n            if (this.knownIssuer[key] === issuer) return true;\n        }\n        return false;\n    }\n}"],"names":["config","this","resolver","Resolver","getResolver","networkConfig","did","InfraDID","createPubKeyDIDsecp256k1","challenge","knownIssuer","ready","generateChallenge","aud","getVPClaims","vp","decodeJWT","payload","verifiableCredential","map","vc","_this","getVCClaims","reduce","result","claims","credentialSubject","isValid","jwt","decoded","isValidVP","isValidVC","Error","verifyPresentation","_this5","audience","verifiedPresentation","vcList","VerifiedCredential","signer","isRevoked","validity","holder","verifyCredential","_this7","verifiedCredential","sub","isKnownIssuer","issuer","id","resolve","didDoc","didDocumentMetadata","deactivated","key"],"mappings":"suBAsBI,WAAaA,GACTC,KAAKC,SAAWF,EAAOE,SAAWF,EAAOE,SAAW,IAAIC,WAASC,cAAYJ,EAAOK,gBACpFJ,KAAKK,IAAMN,EAAOM,IAAMN,EAAOM,IAAMC,EAASC,yBAAyB,MAAMF,IAC7EL,KAAKQ,UAAY,GACjBR,KAAKS,YAAcV,EAAOU,uCAGvBC,MAAA,WAEH,OADAV,KAAKQ,UAAYR,KAAKW,oBACf,CAAEH,UAAWR,KAAKQ,UAAWI,IAAKZ,KAAKK,QAG1CM,kBAAA,WAEJ,OAAOL,EAASC,yBAAyB,MAAMF,OAG5CQ,YAAA,SAAYC,cAEf,OADeC,YAAUD,GAAIE,QAAQF,GAAGG,qBAC1BC,IAAI,SAACC,GACf,OAAOC,EAAKC,YAAYF,KACzBG,OAAO,SAACC,EAAcC,GACrB,YAAYA,EAAWD,IACxB,OAGAF,YAAA,SAAYF,GACf,OAAOJ,YAAUI,GAAIH,QAAQG,GAAGM,qBAGvBC,iBAAQC,WACXC,EAAUb,YAAUY,GAC1B,GAAIC,EAAQZ,QAAQF,GAAI,uBAAOd,KAAK6B,UAAUF,OACrCC,EAAQZ,QAAQG,GAAI,uBADEnB,KACU8B,UAAUH,cACpCI,gEAGNF,mBAAWf,aAEsCd,4BAAvBgC,qBAAmBlB,EAAImB,EAAKhC,SAAU,CAAEO,UAAWyB,EAAKzB,UAAW0B,SAAUD,EAAK5B,qBAA/G8B,GACN,IAAMC,EAASD,EAAqBnB,QAAQF,GAAGuB,mBACzCC,EAASH,EAAqBnB,QAAQsB,OAC5C,GAAIL,EAAKM,UAAUD,EAAOjC,KAAM,UAAU0B,+BAC1C,OAAOK,EAAOlB,IAAI,SAACC,GACf,SAAYW,UAAUX,EAAImB,EAAOjC,SAC5BiB,OAAO,SAACC,EAAkBiB,GAC/B,OAAOjB,GAAUiB,IAClB,2CAGMV,mBAAWX,EAASsB,aAEyBzC,4BAArB0C,mBAAiBvB,EAAIwB,EAAK1C,yBAArD2C,GACN,GAAIH,GAAUG,EAAmB5B,QAAQ6B,MAAQJ,EAAQ,UAAUV,yCAGnE,GAAIY,EAAKG,cAAcF,EAAmBG,QAAS,UAAUhB,wBAG7D,GAAIY,EAAKJ,UAAUK,EAAmBG,QAAS,UAAUhB,4BAIzD,GAAIY,EAAKJ,UADIK,EAAmB5B,QAAQG,GAAG6B,IACjB,UAAUjB,oBAEpC,iDAGSQ,mBAAUlC,8BACEL,KAAKC,SAASgD,QAAQ5C,kBAArC6C,WACFA,EAAOC,oBAAoBC,oDAI5BN,cAAA,SAAcC,GACjB,IAAK,IAAMM,UAAY5C,YACnB,GAAIT,KAAKS,YAAY4C,KAASN,EAAQ,SAE1C"}